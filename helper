Якщо можна вивести який-небудь вираз на екран, присвоїти його якійсь змінній тощо, то це expression. Якщо це неможливо, то це statement. Statement є повноцінним рядком коду, що визначає якусь дію, в той час як expression являє собою ділянку коду, що може бути представлена у вигляді якогось значення. Expressions можуть поєднуватись «горизонтально» у більші вирази використовуючи оператори. Statements можуть поєднуватись «вертикально» у блоки, або просто знаходячись один за одним. 
Expression – це будь-яка допустима комбінація констант, змінних, операторів та викликів функції, що може бути представлена значенням якогось типу, наприклад, int. Якщо всі елементи expression є типу int, expression теж буде типу int. 
Statements модифікують змінну, або ж мають якісь інші «побічні» ефекти, під час обрахунку expression. Як тільки виконання statement завершилось, виконується наступний за порядком statement (якщо він є). [26-27]. 



	Під час рекурсивного спуску за деревом, функція парсингу «входить» у якусь гілку, після чого доходить до кінця (термінального символу). На наступному кроці треба повернутися на початок цієї гілки (підйом).
	Отже, спускаючись функція парсингу заходить у кожен вузел, а піднімаючись – виходить.

Правила граматики, за якими будується AST є рекурсивними (бо у регулярних мовах вкладені структури можуть бути виражені лише рекурсивним чином), отже функції парсингу теж рекурсивні. Звідси і назва рекурсивний нисхідний аналізатор.


•	додати складений оператор;
•	додати оператори порівняння і логічні оператори;
•	додати умовний оператор;
•	додати цикли;
•	додати опис і виклик функцій; 

Щодо питання, а навіщо взагалі писати компілятор, то для цього є декілька причин [7]: